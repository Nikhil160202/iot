Q1 Write a Java Program to implement Command Design Pattern for Command Interface
with execute() . Use this to create variety of commands for LightOnCommand,
LightOffCommand, GarageDoorUpCommand, StereoOnWithCDComman
Ans
interface Command {
    void execute();
}
class Light {
    public void on() {
        System.out.println("The light is ON");
    }
    public void off() {
        System.out.println("The light is OFF");
    }
}
class GarageDoor {
    public void up() {
        System.out.println("The garage door is UP");
    }
    public void down() {
        System.out.println("The garage door is DOWN");
    }
}
class Stereo {
    public void on() {
        System.out.println("The stereo is ON");
    }
    public void off() {
        System.out.println("The stereo is OFF");
    }
    public void setCD() {
        System.out.println("CD is inserted into the stereo.");
    }
    public void setVolume() {
        System.out.println("Volume is set to 10.");
    }
}
class LightOnCommand implements Command {
    private Light light;
    public LightOnCommand(Light light) {
        this.light = light;
    }
    @Override
    public void execute() {
        light.on();
    }
}
class LightOffCommand implements Command {
    private Light light;
    public LightOffCommand(Light light) {
        this.light = light;
    }
    @Override
    public void execute() {
        light.off();
    }
}
class GarageDoorUpCommand implements Command {
    private GarageDoor garageDoor;

    public GarageDoorUpCommand(GarageDoor garageDoor) {
        this.garageDoor = garageDoor;
    }
    @Override
    public void execute() {
        garageDoor.up();
    }
}
class StereoOnWithCDCommand implements Command {
    private Stereo stereo;
    public StereoOnWithCDCommand(Stereo stereo) {
        this.stereo = stereo;
    }
    @Override
    public void execute() {
        stereo.on();
        stereo.setCD();
        stereo.setVolume();
    }
}
class RemoteControl {
    private Command[] onCommands;
    private Command[] offCommands;
    public RemoteControl() {
        onCommands = new Command[7];
        offCommands = new Command[7];
    }
    public void setCommand(int slot, Command onCommand, Command offCommand) {
        onCommands[slot] = onCommand;
        offCommands[slot] = offCommand;
    }
    public void pressOnButton(int slot) {
        onCommands[slot].execute();
    }
    public void pressOffButton(int slot) {
        offCommands[slot].execute();
    }
}
public class CommandPatternTest {
    public static void main(String[] args) {
        // Receiver Objects
        Light light = new Light();
        GarageDoor garageDoor = new GarageDoor();
        Stereo stereo = new Stereo();
        LightOnCommand lightOn = new LightOnCommand(light);
        LightOffCommand lightOff = new LightOffCommand(light);
        GarageDoorUpCommand garageDoorUp = new GarageDoorUpCommand(garageDoor);
        StereoOnWithCDCommand stereoOnWithCD = new StereoOnWithCDCommand(stereo);
        RemoteControl remote = new RemoteControl();
        remote.setCommand(0, lightOn, lightOff);
        remote.setCommand(1, garageDoorUp, null);  // No off command for garage door in this example
        remote.setCommand(2, stereoOnWithCD, null);  // No off command for stereo in this example
        System.out.println("Pressing the 'ON' button for Light:");
        remote.pressOnButton(0);
        System.out.println("\nPressing the 'OFF' button for Light:");
        remote.pressOffButton(0);
        System.out.println("\nPressing the 'ON' button for Garage Door:");
        remote.pressOnButton(1);
        System.out.println("\nPressing the 'ON' button for Stereo:");
        remote.pressOnButton(2);
    }
}
3. Write a program to detects the vibration of an object with sensor using
Arduino.
const int sensorPin = 2; // Pin connected to the OUT of the vibration sensor
const int ledPin = 13; // Pin connected to the LED
void setup() {
 pinMode(sensorPin, INPUT); // Set the sensor pin as input
 pinMode(ledPin, OUTPUT); // Set the LED pin as output
 Serial.begin(9600); // Start the serial communication
}
void loop() {
 int sensorValue = digitalRead(sensorPin); // Read the sensor value
 // Print sensor value to Serial Monitor
 Serial.print("Sensor Value: ");
 Serial.println(sensorValue);
 // If vibration is detected (sensorValue HIGH)
 if (sensorValue == HIGH) {
 digitalWrite(ledPin, HIGH); // Turn the LED on
 } else {
 digitalWrite(ledPin, LOW); // Turn the LED off
 }
 delay(100); // Short delay for stability
}
