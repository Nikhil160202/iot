Write a Java Program to implement Decorator Pattern for interface Car to define the
assemble() method and then decorate it to Sports car and Luxury Car
Ans: 
// Car Interface
interface Car {
    void assemble();
}
class BasicCar implements Car {
    @Override
    public void assemble() {
        System.out.println("Basic Car.");
    }
}
abstract class CarDecorator implements Car {
    protected Car car;
    public CarDecorator(Car car) {
        this.car = car;
    }
    public void assemble() {
        this.car.assemble();  // Delegate the assembling task to the wrapped car
    }
}
class SportsCarDecorator extends CarDecorator {
    public SportsCarDecorator(Car car) {
        super(car);
    }
    @Override
    public void assemble() {
        car.assemble();  // First, assemble the basic car
        addSportsFeatures();  // Then add sports features
    }
    private void addSportsFeatures() {
        System.out.println("Adding features of Sports Car.");
    }
}
class LuxuryCarDecorator extends CarDecorator {
    public LuxuryCarDecorator(Car car) {
        super(car);
    }
    @Override
    public void assemble() {
        car.assemble();  // First, assemble the basic car
        addLuxuryFeatures();  // Then add luxury features
    }
    private void addLuxuryFeatures() {
        System.out.println("Adding features of Luxury Car.");
    }
}
public class DecoratorPatternTest {
    public static void main(String[] args) {
        Car sportsCar = new SportsCarDecorator(new BasicCar());
        System.out.println("Sports Car: ");
        sportsCar.assemble();  // Assemble a sports car
        System.out.println("\n*****");
        Car sportsLuxuryCar = new LuxuryCarDecorator(new SportsCarDecorator(new BasicCar()));
        System.out.println("Sports Luxury Car: ");
        sportsLuxuryCar.assemble();  // Assemble a sports luxury car
    }
}
Q.2 Write a program to sense the available networks using Arduino
#include <SoftwareSerial.h>
#include <ESP8266WiFi.h>
SoftwareSerial espSerial(2, 3); // RX, TX
WiFiClass WiFi;
void setup() {
 Serial.begin(115200); // Start Serial Monitor
 espSerial.begin(115200); // Start ESP Serial
 // Initialize ESP8266
 espSerial.println("AT+RST"); // Reset the ESP
 delay(1000);
 espSerial.println("AT+CWMODE=1"); // Set to Station mode
 delay(1000);
}
void loop() {
 espSerial.println("AT+CWLAP"); // Command to list available networks
 delay(5000); // Wait for the response
 while (espSerial.available()) {
 Serial.write(espSerial.read()); // Print response to Serial Monitor
 }
 delay(10000); // Wait before next scan
}
